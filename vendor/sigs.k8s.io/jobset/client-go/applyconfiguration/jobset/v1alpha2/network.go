/*
Copyright 2023 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// NetworkApplyConfiguration represents a declarative configuration of the Network type for use
// with apply.
type NetworkApplyConfiguration struct {
	EnableDNSHostnames       *bool   `json:"enableDNSHostnames,omitempty"`
	Subdomain                *string `json:"subdomain,omitempty"`
	PublishNotReadyAddresses *bool   `json:"publishNotReadyAddresses,omitempty"`
}

// NetworkApplyConfiguration constructs a declarative configuration of the Network type for use with
// apply.
func Network() *NetworkApplyConfiguration {
	return &NetworkApplyConfiguration{}
}

// WithEnableDNSHostnames sets the EnableDNSHostnames field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableDNSHostnames field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithEnableDNSHostnames(value bool) *NetworkApplyConfiguration {
	b.EnableDNSHostnames = &value
	return b
}

// WithSubdomain sets the Subdomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subdomain field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithSubdomain(value string) *NetworkApplyConfiguration {
	b.Subdomain = &value
	return b
}

// WithPublishNotReadyAddresses sets the PublishNotReadyAddresses field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PublishNotReadyAddresses field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithPublishNotReadyAddresses(value bool) *NetworkApplyConfiguration {
	b.PublishNotReadyAddresses = &value
	return b
}
