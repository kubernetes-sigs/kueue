/*
Copyright 2023 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/client-go/applyconfigurations/batch/v1"
)

// ReplicatedJobApplyConfiguration represents a declarative configuration of the ReplicatedJob type for use
// with apply.
type ReplicatedJobApplyConfiguration struct {
	Name      *string                               `json:"name,omitempty"`
	GroupName *string                               `json:"groupName,omitempty"`
	Template  *v1.JobTemplateSpecApplyConfiguration `json:"template,omitempty"`
	Replicas  *int32                                `json:"replicas,omitempty"`
	DependsOn []DependsOnApplyConfiguration         `json:"dependsOn,omitempty"`
}

// ReplicatedJobApplyConfiguration constructs a declarative configuration of the ReplicatedJob type for use with
// apply.
func ReplicatedJob() *ReplicatedJobApplyConfiguration {
	return &ReplicatedJobApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ReplicatedJobApplyConfiguration) WithName(value string) *ReplicatedJobApplyConfiguration {
	b.Name = &value
	return b
}

// WithGroupName sets the GroupName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupName field is set to the value of the last call.
func (b *ReplicatedJobApplyConfiguration) WithGroupName(value string) *ReplicatedJobApplyConfiguration {
	b.GroupName = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ReplicatedJobApplyConfiguration) WithTemplate(value *v1.JobTemplateSpecApplyConfiguration) *ReplicatedJobApplyConfiguration {
	b.Template = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ReplicatedJobApplyConfiguration) WithReplicas(value int32) *ReplicatedJobApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithDependsOn adds the given value to the DependsOn field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DependsOn field.
func (b *ReplicatedJobApplyConfiguration) WithDependsOn(values ...*DependsOnApplyConfiguration) *ReplicatedJobApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDependsOn")
		}
		b.DependsOn = append(b.DependsOn, *values[i])
	}
	return b
}
