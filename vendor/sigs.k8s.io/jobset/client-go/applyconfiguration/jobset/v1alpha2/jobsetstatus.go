/*
Copyright 2023 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// JobSetStatusApplyConfiguration represents a declarative configuration of the JobSetStatus type for use
// with apply.
type JobSetStatusApplyConfiguration struct {
	Conditions              []v1.ConditionApplyConfiguration        `json:"conditions,omitempty"`
	Restarts                *int32                                  `json:"restarts,omitempty"`
	RestartsCountTowardsMax *int32                                  `json:"restartsCountTowardsMax,omitempty"`
	TerminalState           *string                                 `json:"terminalState,omitempty"`
	ReplicatedJobsStatus    []ReplicatedJobStatusApplyConfiguration `json:"replicatedJobsStatus,omitempty"`
}

// JobSetStatusApplyConfiguration constructs a declarative configuration of the JobSetStatus type for use with
// apply.
func JobSetStatus() *JobSetStatusApplyConfiguration {
	return &JobSetStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *JobSetStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *JobSetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithRestarts sets the Restarts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Restarts field is set to the value of the last call.
func (b *JobSetStatusApplyConfiguration) WithRestarts(value int32) *JobSetStatusApplyConfiguration {
	b.Restarts = &value
	return b
}

// WithRestartsCountTowardsMax sets the RestartsCountTowardsMax field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartsCountTowardsMax field is set to the value of the last call.
func (b *JobSetStatusApplyConfiguration) WithRestartsCountTowardsMax(value int32) *JobSetStatusApplyConfiguration {
	b.RestartsCountTowardsMax = &value
	return b
}

// WithTerminalState sets the TerminalState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TerminalState field is set to the value of the last call.
func (b *JobSetStatusApplyConfiguration) WithTerminalState(value string) *JobSetStatusApplyConfiguration {
	b.TerminalState = &value
	return b
}

// WithReplicatedJobsStatus adds the given value to the ReplicatedJobsStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ReplicatedJobsStatus field.
func (b *JobSetStatusApplyConfiguration) WithReplicatedJobsStatus(values ...*ReplicatedJobStatusApplyConfiguration) *JobSetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithReplicatedJobsStatus")
		}
		b.ReplicatedJobsStatus = append(b.ReplicatedJobsStatus, *values[i])
	}
	return b
}
