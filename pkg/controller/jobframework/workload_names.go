/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package jobframework

import (
	"crypto/sha1"
	"encoding/hex"
	"strings"

	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/rand"
	"k8s.io/apimachinery/pkg/util/validation"
)

const (
	// nameDelimiter is the delimiter character used for joining name value tokens.
	nameDelimiter = "-"

	// hashLength defines the length of the hash suffix used in workload names.
	hashLength = 5

	// maxPrefixLength is the maximum allowed length for the name prefix portion of a workload,
	// accounting for the delimiter and hash suffix, so that the final name fits within the
	// DNS1123 subdomain limit (253 characters).
	maxPrefixLength = validation.DNS1123SubdomainMaxLength - 1 - hashLength
)

// workloadSuffix returns either a deterministic or random suffix string of up to `maxLength` characters.
//
// Behavior:
//   - If no input values are provided, a random lowercase string of the given length is returned.
//   - If one or more values are provided, a deterministic suffix is generated by:
//     1. Joining the input values with newline characters.
//     2. Hashing the joined string with SHA1.
//     3. Returning the first `maxLength` characters of the hexadecimal hash.
//
// This function ensures consistent suffix generation based on the same input values,
// which is critical for workload name predictability across reconciliations.
func workloadSuffix(maxLength uint, values ...string) string {
	if len(values) == 0 {
		return strings.ToLower(rand.String(int(maxLength)))
	}
	h := sha1.New()
	h.Write([]byte(strings.Join(values, "\n")))
	return hex.EncodeToString(h.Sum(nil))[:maxLength]
}

// workloadPrefix constructs a name prefix by joining the provided values with a delimiter,
// and ensures the result does not exceed `maxLength` characters.
//
// The resulting string is lowercased and truncated if necessary.
// The delimiter (`-`) is not guaranteed to be trimmed as part of truncation.
//
// Example:
//
//   - workloadPrefix(10, "foo", "bar") => "foo-bar"
//   - workloadPrefix(5, "foo", "bar")  => "foo-b"
//   - workloadPrefix(4, "foo", "bar") => "foo-" <-- note: dangling delimiter.
func workloadPrefix(maxLength uint, values ...string) string {
	prefix := strings.ToLower(strings.Join(values, nameDelimiter))
	if len(prefix) > int(maxLength) {
		return prefix[:maxLength]
	}
	return prefix
}

// GetWorkloadNameForOwnerWithGVK generates a deterministic workload name for a given owner object,
// such as a batch Job or similar.
//
// The name is composed of:
//   - A prefix: derived from the Kind and name of the owner object, truncated to fit.
//   - A suffix: derived from the Kind, Group, name, and UID of the owner, hashed deterministically.
//
// The result adheres to DNS1123 subdomain naming rules and length constraints.
//
// This function is used to ensure name uniqueness and consistency for workloads
// associated with a given owner object.
func GetWorkloadNameForOwnerWithGVK(ownerName string, ownerUID types.UID, ownerGVK schema.GroupVersionKind) string {
	return workloadPrefix(uint(maxPrefixLength), ownerGVK.Kind, ownerName) + nameDelimiter +
		workloadSuffix(hashLength, ownerGVK.Kind, ownerGVK.Group, ownerName, string(ownerUID))
}
