---
apiVersion: kjobctl.x-k8s.io/v1alpha1
kind: ApplicationProfile
metadata:
  name: ray-cluster-profile
  namespace: default
spec:
  supportedModes:
    - name: RayCluster
      template: ray-cluster-template
  volumeBundles: ["ray-cluster-volume-bundle"]
---
apiVersion: kjobctl.x-k8s.io/v1alpha1
kind: RayClusterTemplate
metadata:
  name: ray-cluster-template
  namespace: default
template:
  spec:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    # Ray head pod template
    headGroupSpec:
      rayStartParams: { }
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray:2.9.0
              resources:
                limits:
                  cpu: 1
                  memory: 2Gi
                requests:
                  cpu: 500m
                  memory: 2Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 5
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        rayStartParams: { }
        #pod template
        template:
          spec:
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray:2.9.0
                resources:
                  limits:
                    cpu: 1
                    memory: 1Gi
                  requests:
                    cpu: 500m
                    memory: 1Gi
---
apiVersion: kjobctl.x-k8s.io/v1alpha1
kind: VolumeBundle
metadata:
  name: ray-cluster-volume-bundle
  namespace: default
spec:
  volumes:
    - name: ray-cluster-code-sample
      configMap:
        name: ray-cluster-code-sample
        items:
          - key: sample_code.py
            path: sample_code.py
  containerVolumeMounts:
    - name: ray-cluster-code-sample
      mountPath: /home/ray/samples
  envVars:
    - name: ENTRYPOINT_PATH
      value: /home/ray/samples
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ray-cluster-code-sample
  namespace: default
data:
  sample_code.py: |
    import ray
    import os
    import requests

    ray.init()

    @ray.remote
    class Counter:
        def __init__(self):
            # Used to verify runtimeEnv
            self.name = os.getenv("counter_name")
            assert self.name == "test_counter"
            self.counter = 0

        def inc(self):
            self.counter += 1

        def get_counter(self):
            return "{} got {}".format(self.name, self.counter)

    counter = Counter.remote()

    for _ in range(5):
        ray.get(counter.inc.remote())
        print(ray.get(counter.get_counter.remote()))

    # Verify that the correct runtime env was used for the job.
    assert requests.__version__ == "2.26.0"