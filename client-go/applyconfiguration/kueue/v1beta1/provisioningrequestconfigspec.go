/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
	v1beta1 "sigs.k8s.io/kueue/apis/kueue/v1beta1"
)

// ProvisioningRequestConfigSpecApplyConfiguration represents an declarative configuration of the ProvisioningRequestConfigSpec type for use
// with apply.
type ProvisioningRequestConfigSpecApplyConfiguration struct {
	ProvisioningClassName *string                      `json:"provisioningClassName,omitempty"`
	Parameters            map[string]v1beta1.Parameter `json:"parameters,omitempty"`
	ManagedResources      []v1.ResourceName            `json:"managedResources,omitempty"`
}

// ProvisioningRequestConfigSpecApplyConfiguration constructs an declarative configuration of the ProvisioningRequestConfigSpec type for use with
// apply.
func ProvisioningRequestConfigSpec() *ProvisioningRequestConfigSpecApplyConfiguration {
	return &ProvisioningRequestConfigSpecApplyConfiguration{}
}

// WithProvisioningClassName sets the ProvisioningClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProvisioningClassName field is set to the value of the last call.
func (b *ProvisioningRequestConfigSpecApplyConfiguration) WithProvisioningClassName(value string) *ProvisioningRequestConfigSpecApplyConfiguration {
	b.ProvisioningClassName = &value
	return b
}

// WithParameters puts the entries into the Parameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Parameters field,
// overwriting an existing map entries in Parameters field with the same key.
func (b *ProvisioningRequestConfigSpecApplyConfiguration) WithParameters(entries map[string]v1beta1.Parameter) *ProvisioningRequestConfigSpecApplyConfiguration {
	if b.Parameters == nil && len(entries) > 0 {
		b.Parameters = make(map[string]v1beta1.Parameter, len(entries))
	}
	for k, v := range entries {
		b.Parameters[k] = v
	}
	return b
}

// WithManagedResources adds the given value to the ManagedResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ManagedResources field.
func (b *ProvisioningRequestConfigSpecApplyConfiguration) WithManagedResources(values ...v1.ResourceName) *ProvisioningRequestConfigSpecApplyConfiguration {
	for i := range values {
		b.ManagedResources = append(b.ManagedResources, values[i])
	}
	return b
}
