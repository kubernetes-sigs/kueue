/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// WorkloadStatusApplyConfiguration represents a declarative configuration of the WorkloadStatus type for use
// with apply.
type WorkloadStatusApplyConfiguration struct {
	Admission                            *AdmissionApplyConfiguration            `json:"admission,omitempty"`
	RequeueState                         *RequeueStateApplyConfiguration         `json:"requeueState,omitempty"`
	Conditions                           []v1.ConditionApplyConfiguration        `json:"conditions,omitempty"`
	ReclaimablePods                      []ReclaimablePodApplyConfiguration      `json:"reclaimablePods,omitempty"`
	AdmissionChecks                      []AdmissionCheckStateApplyConfiguration `json:"admissionChecks,omitempty"`
	ResourceRequests                     []PodSetRequestApplyConfiguration       `json:"resourceRequests,omitempty"`
	AccumulatedPastExexcutionTimeSeconds *int32                                  `json:"accumulatedPastExexcutionTimeSeconds,omitempty"`
}

// WorkloadStatusApplyConfiguration constructs a declarative configuration of the WorkloadStatus type for use with
// apply.
func WorkloadStatus() *WorkloadStatusApplyConfiguration {
	return &WorkloadStatusApplyConfiguration{}
}

// WithAdmission sets the Admission field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Admission field is set to the value of the last call.
func (b *WorkloadStatusApplyConfiguration) WithAdmission(value *AdmissionApplyConfiguration) *WorkloadStatusApplyConfiguration {
	b.Admission = value
	return b
}

// WithRequeueState sets the RequeueState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequeueState field is set to the value of the last call.
func (b *WorkloadStatusApplyConfiguration) WithRequeueState(value *RequeueStateApplyConfiguration) *WorkloadStatusApplyConfiguration {
	b.RequeueState = value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *WorkloadStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *WorkloadStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithReclaimablePods adds the given value to the ReclaimablePods field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ReclaimablePods field.
func (b *WorkloadStatusApplyConfiguration) WithReclaimablePods(values ...*ReclaimablePodApplyConfiguration) *WorkloadStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithReclaimablePods")
		}
		b.ReclaimablePods = append(b.ReclaimablePods, *values[i])
	}
	return b
}

// WithAdmissionChecks adds the given value to the AdmissionChecks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdmissionChecks field.
func (b *WorkloadStatusApplyConfiguration) WithAdmissionChecks(values ...*AdmissionCheckStateApplyConfiguration) *WorkloadStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAdmissionChecks")
		}
		b.AdmissionChecks = append(b.AdmissionChecks, *values[i])
	}
	return b
}

// WithResourceRequests adds the given value to the ResourceRequests field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResourceRequests field.
func (b *WorkloadStatusApplyConfiguration) WithResourceRequests(values ...*PodSetRequestApplyConfiguration) *WorkloadStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResourceRequests")
		}
		b.ResourceRequests = append(b.ResourceRequests, *values[i])
	}
	return b
}

// WithAccumulatedPastExexcutionTimeSeconds sets the AccumulatedPastExexcutionTimeSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccumulatedPastExexcutionTimeSeconds field is set to the value of the last call.
func (b *WorkloadStatusApplyConfiguration) WithAccumulatedPastExexcutionTimeSeconds(value int32) *WorkloadStatusApplyConfiguration {
	b.AccumulatedPastExexcutionTimeSeconds = &value
	return b
}
