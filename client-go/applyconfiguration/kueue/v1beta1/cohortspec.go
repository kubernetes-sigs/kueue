/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	kueuev1beta1 "sigs.k8s.io/kueue/apis/kueue/v1beta1"
)

// CohortSpecApplyConfiguration represents a declarative configuration of the CohortSpec type for use
// with apply.
type CohortSpecApplyConfiguration struct {
	ParentName     *kueuev1beta1.CohortReference     `json:"parentName,omitempty"`
	ResourceGroups []ResourceGroupApplyConfiguration `json:"resourceGroups,omitempty"`
	FairSharing    *FairSharingApplyConfiguration    `json:"fairSharing,omitempty"`
}

// CohortSpecApplyConfiguration constructs a declarative configuration of the CohortSpec type for use with
// apply.
func CohortSpec() *CohortSpecApplyConfiguration {
	return &CohortSpecApplyConfiguration{}
}

// WithParentName sets the ParentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParentName field is set to the value of the last call.
func (b *CohortSpecApplyConfiguration) WithParentName(value kueuev1beta1.CohortReference) *CohortSpecApplyConfiguration {
	b.ParentName = &value
	return b
}

// WithResourceGroups adds the given value to the ResourceGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResourceGroups field.
func (b *CohortSpecApplyConfiguration) WithResourceGroups(values ...*ResourceGroupApplyConfiguration) *CohortSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResourceGroups")
		}
		b.ResourceGroups = append(b.ResourceGroups, *values[i])
	}
	return b
}

// WithFairSharing sets the FairSharing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FairSharing field is set to the value of the last call.
func (b *CohortSpecApplyConfiguration) WithFairSharing(value *FairSharingApplyConfiguration) *CohortSpecApplyConfiguration {
	b.FairSharing = value
	return b
}
