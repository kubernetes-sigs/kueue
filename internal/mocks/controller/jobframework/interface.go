// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kueue/pkg/controller/jobframework (interfaces: GenericJob,JobWithCustomValidation,JobWithManagedBy,JobWithCustomWorkloadActivation)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/controller/jobframework/interface.go -package mocks sigs.k8s.io/kueue/pkg/controller/jobframework GenericJob,JobWithCustomValidation,JobWithManagedBy,JobWithCustomWorkloadActivation
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	v1beta2 "sigs.k8s.io/kueue/apis/kueue/v1beta2"
	jobframework "sigs.k8s.io/kueue/pkg/controller/jobframework"
	podset "sigs.k8s.io/kueue/pkg/podset"
)

// MockGenericJob is a mock of GenericJob interface.
type MockGenericJob struct {
	ctrl     *gomock.Controller
	recorder *MockGenericJobMockRecorder
	isgomock struct{}
}

// MockGenericJobMockRecorder is the mock recorder for MockGenericJob.
type MockGenericJobMockRecorder struct {
	mock *MockGenericJob
}

// NewMockGenericJob creates a new mock instance.
func NewMockGenericJob(ctrl *gomock.Controller) *MockGenericJob {
	mock := &MockGenericJob{ctrl: ctrl}
	mock.recorder = &MockGenericJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericJob) EXPECT() *MockGenericJobMockRecorder {
	return m.recorder
}

// Finished mocks base method.
func (m *MockGenericJob) Finished(ctx context.Context) (string, bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Finished indicates an expected call of Finished.
func (mr *MockGenericJobMockRecorder) Finished(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockGenericJob)(nil).Finished), ctx)
}

// GVK mocks base method.
func (m *MockGenericJob) GVK() schema.GroupVersionKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GVK")
	ret0, _ := ret[0].(schema.GroupVersionKind)
	return ret0
}

// GVK indicates an expected call of GVK.
func (mr *MockGenericJobMockRecorder) GVK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GVK", reflect.TypeOf((*MockGenericJob)(nil).GVK))
}

// IsActive mocks base method.
func (m *MockGenericJob) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockGenericJobMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockGenericJob)(nil).IsActive))
}

// IsSuspended mocks base method.
func (m *MockGenericJob) IsSuspended() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuspended")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuspended indicates an expected call of IsSuspended.
func (mr *MockGenericJobMockRecorder) IsSuspended() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuspended", reflect.TypeOf((*MockGenericJob)(nil).IsSuspended))
}

// Object mocks base method.
func (m *MockGenericJob) Object() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockGenericJobMockRecorder) Object() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockGenericJob)(nil).Object))
}

// PodSets mocks base method.
func (m *MockGenericJob) PodSets(ctx context.Context) ([]v1beta2.PodSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodSets", ctx)
	ret0, _ := ret[0].([]v1beta2.PodSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodSets indicates an expected call of PodSets.
func (mr *MockGenericJobMockRecorder) PodSets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSets", reflect.TypeOf((*MockGenericJob)(nil).PodSets), ctx)
}

// PodsReady mocks base method.
func (m *MockGenericJob) PodsReady(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsReady", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PodsReady indicates an expected call of PodsReady.
func (mr *MockGenericJobMockRecorder) PodsReady(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsReady", reflect.TypeOf((*MockGenericJob)(nil).PodsReady), ctx)
}

// RestorePodSetsInfo mocks base method.
func (m *MockGenericJob) RestorePodSetsInfo(podSetsInfo []podset.PodSetInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePodSetsInfo", podSetsInfo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RestorePodSetsInfo indicates an expected call of RestorePodSetsInfo.
func (mr *MockGenericJobMockRecorder) RestorePodSetsInfo(podSetsInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePodSetsInfo", reflect.TypeOf((*MockGenericJob)(nil).RestorePodSetsInfo), podSetsInfo)
}

// RunWithPodSetsInfo mocks base method.
func (m *MockGenericJob) RunWithPodSetsInfo(ctx context.Context, podSetsInfo []podset.PodSetInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithPodSetsInfo", ctx, podSetsInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithPodSetsInfo indicates an expected call of RunWithPodSetsInfo.
func (mr *MockGenericJobMockRecorder) RunWithPodSetsInfo(ctx, podSetsInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithPodSetsInfo", reflect.TypeOf((*MockGenericJob)(nil).RunWithPodSetsInfo), ctx, podSetsInfo)
}

// Suspend mocks base method.
func (m *MockGenericJob) Suspend() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Suspend")
}

// Suspend indicates an expected call of Suspend.
func (mr *MockGenericJobMockRecorder) Suspend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockGenericJob)(nil).Suspend))
}

// MockJobWithCustomValidation is a mock of JobWithCustomValidation interface.
type MockJobWithCustomValidation struct {
	ctrl     *gomock.Controller
	recorder *MockJobWithCustomValidationMockRecorder
	isgomock struct{}
}

// MockJobWithCustomValidationMockRecorder is the mock recorder for MockJobWithCustomValidation.
type MockJobWithCustomValidationMockRecorder struct {
	mock *MockJobWithCustomValidation
}

// NewMockJobWithCustomValidation creates a new mock instance.
func NewMockJobWithCustomValidation(ctrl *gomock.Controller) *MockJobWithCustomValidation {
	mock := &MockJobWithCustomValidation{ctrl: ctrl}
	mock.recorder = &MockJobWithCustomValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWithCustomValidation) EXPECT() *MockJobWithCustomValidationMockRecorder {
	return m.recorder
}

// ValidateOnCreate mocks base method.
func (m *MockJobWithCustomValidation) ValidateOnCreate(ctx context.Context) (field.ErrorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOnCreate", ctx)
	ret0, _ := ret[0].(field.ErrorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateOnCreate indicates an expected call of ValidateOnCreate.
func (mr *MockJobWithCustomValidationMockRecorder) ValidateOnCreate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOnCreate", reflect.TypeOf((*MockJobWithCustomValidation)(nil).ValidateOnCreate), ctx)
}

// ValidateOnUpdate mocks base method.
func (m *MockJobWithCustomValidation) ValidateOnUpdate(ctx context.Context, oldJob jobframework.GenericJob) (field.ErrorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOnUpdate", ctx, oldJob)
	ret0, _ := ret[0].(field.ErrorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateOnUpdate indicates an expected call of ValidateOnUpdate.
func (mr *MockJobWithCustomValidationMockRecorder) ValidateOnUpdate(ctx, oldJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOnUpdate", reflect.TypeOf((*MockJobWithCustomValidation)(nil).ValidateOnUpdate), ctx, oldJob)
}

// MockJobWithManagedBy is a mock of JobWithManagedBy interface.
type MockJobWithManagedBy struct {
	ctrl     *gomock.Controller
	recorder *MockJobWithManagedByMockRecorder
	isgomock struct{}
}

// MockJobWithManagedByMockRecorder is the mock recorder for MockJobWithManagedBy.
type MockJobWithManagedByMockRecorder struct {
	mock *MockJobWithManagedBy
}

// NewMockJobWithManagedBy creates a new mock instance.
func NewMockJobWithManagedBy(ctrl *gomock.Controller) *MockJobWithManagedBy {
	mock := &MockJobWithManagedBy{ctrl: ctrl}
	mock.recorder = &MockJobWithManagedByMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWithManagedBy) EXPECT() *MockJobWithManagedByMockRecorder {
	return m.recorder
}

// CanDefaultManagedBy mocks base method.
func (m *MockJobWithManagedBy) CanDefaultManagedBy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanDefaultManagedBy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanDefaultManagedBy indicates an expected call of CanDefaultManagedBy.
func (mr *MockJobWithManagedByMockRecorder) CanDefaultManagedBy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanDefaultManagedBy", reflect.TypeOf((*MockJobWithManagedBy)(nil).CanDefaultManagedBy))
}

// ManagedBy mocks base method.
func (m *MockJobWithManagedBy) ManagedBy() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedBy")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ManagedBy indicates an expected call of ManagedBy.
func (mr *MockJobWithManagedByMockRecorder) ManagedBy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedBy", reflect.TypeOf((*MockJobWithManagedBy)(nil).ManagedBy))
}

// SetManagedBy mocks base method.
func (m *MockJobWithManagedBy) SetManagedBy(arg0 *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetManagedBy", arg0)
}

// SetManagedBy indicates an expected call of SetManagedBy.
func (mr *MockJobWithManagedByMockRecorder) SetManagedBy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManagedBy", reflect.TypeOf((*MockJobWithManagedBy)(nil).SetManagedBy), arg0)
}

// MockJobWithCustomWorkloadActivation is a mock of JobWithCustomWorkloadActivation interface.
type MockJobWithCustomWorkloadActivation struct {
	ctrl     *gomock.Controller
	recorder *MockJobWithCustomWorkloadActivationMockRecorder
	isgomock struct{}
}

// MockJobWithCustomWorkloadActivationMockRecorder is the mock recorder for MockJobWithCustomWorkloadActivation.
type MockJobWithCustomWorkloadActivationMockRecorder struct {
	mock *MockJobWithCustomWorkloadActivation
}

// NewMockJobWithCustomWorkloadActivation creates a new mock instance.
func NewMockJobWithCustomWorkloadActivation(ctrl *gomock.Controller) *MockJobWithCustomWorkloadActivation {
	mock := &MockJobWithCustomWorkloadActivation{ctrl: ctrl}
	mock.recorder = &MockJobWithCustomWorkloadActivationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWithCustomWorkloadActivation) EXPECT() *MockJobWithCustomWorkloadActivationMockRecorder {
	return m.recorder
}

// IsWorkloadActive mocks base method.
func (m *MockJobWithCustomWorkloadActivation) IsWorkloadActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorkloadActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWorkloadActive indicates an expected call of IsWorkloadActive.
func (mr *MockJobWithCustomWorkloadActivationMockRecorder) IsWorkloadActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorkloadActive", reflect.TypeOf((*MockJobWithCustomWorkloadActivation)(nil).IsWorkloadActive))
}
